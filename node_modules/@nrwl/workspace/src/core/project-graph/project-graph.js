"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.projectGraphAdapter = exports.createProjectGraphAsync = exports.readCachedProjectGraph = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const nx_deps_cache_1 = require("../nx-deps/nx-deps-cache");
const build_project_graph_1 = require("./build-project-graph");
const file_utils_1 = require("../file-utils");
/**
 * Synchronously reads the latest cached copy of the workspace's ProjectGraph.
 * @throws {Error} if there is no cached ProjectGraph to read from
 */
function readCachedProjectGraph(projectGraphVersion = '5.0') {
    const projectGraphCache = nx_deps_cache_1.readCache();
    const angularSpecificError = file_utils_1.workspaceFileName() === 'angular.json'
        ? devkit_1.stripIndents `
      Make sure invoke 'node ./decorate-angular-cli.js' in your postinstall script. 
      The decorated CLI will compute the project graph. 
      'ng --help' should say 'Smart, Extensible Build Framework'.
      `
        : '';
    if (!projectGraphCache) {
        throw new Error(devkit_1.stripIndents `
      [readCachedProjectGraph] ERROR: No cached ProjectGraph is available.

      If you are leveraging \`readCachedProjectGraph()\` directly then you will need to refactor your usage to first ensure that
      the ProjectGraph is created by calling \`await createProjectGraphAsync()\` somewhere before attempting to read the data.

      If you encounter this error as part of running standard \`nx\` commands then please open an issue on https://github.com/nrwl/nx
      
      ${angularSpecificError}
    `);
    }
    const projectGraph = {
        version: projectGraphCache.version,
        nodes: projectGraphCache.nodes,
        externalNodes: projectGraphCache.externalNodes,
        dependencies: projectGraphCache.dependencies,
    };
    return projectGraphAdapter(projectGraph.version, projectGraphVersion, projectGraph);
}
exports.readCachedProjectGraph = readCachedProjectGraph;
function createProjectGraphAsync(projectGraphVersion = '5.0') {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        /**
         * Using the daemon is currently an undocumented, opt-in feature while we build out its capabilities.
         * If the environment variable is not set to true, fallback to using the existing in-process logic.
         */
        if (process.env.NX_DAEMON !== 'true') {
            return projectGraphAdapter('5.0', projectGraphVersion, yield build_project_graph_1.buildProjectGraph());
        }
        const daemonClient = require('./daemon/client/client');
        if (!(yield daemonClient.isServerAvailable())) {
            yield daemonClient.startInBackground();
        }
        return projectGraphAdapter('5.0', projectGraphVersion, daemonClient.getProjectGraphFromServer());
    });
}
exports.createProjectGraphAsync = createProjectGraphAsync;
/**
 * Backwards compatibility adapter for project graph
 * @param {string} sourceVersion
 * @param {string} targetVersion
 * @param projectGraph
 * @param {ProjectGraph} projectGraph
 * @returns {ProjectGraph}
 */
function projectGraphAdapter(sourceVersion, targetVersion, projectGraph) {
    if (sourceVersion === targetVersion) {
        return projectGraph;
    }
    if (sourceVersion === '5.0' && targetVersion === '4.0') {
        return projectGraphCompat5to4(projectGraph);
    }
    throw new Error(`Invalid source or target versions. Source: ${sourceVersion}, Target: ${targetVersion}`);
}
exports.projectGraphAdapter = projectGraphAdapter;
/**
 * Backwards compatibility adapter for project Nodes v4 to v5
 * @param {ProjectGraph} projectGraph
 * @returns {ProjectGraph}
 */
function projectGraphCompat5to4(projectGraph) {
    const { externalNodes } = projectGraph, rest = tslib_1.__rest(projectGraph, ["externalNodes"]);
    return Object.assign(Object.assign({}, rest), { nodes: Object.assign(Object.assign({}, projectGraph.nodes), externalNodes), dependencies: Object.assign(Object.assign({}, projectGraph.dependencies), Object.keys(externalNodes).reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [`npm:${key}`]: [] })), {})), version: '4.0' });
}
//# sourceMappingURL=project-graph.js.map